Tips for Creating a Good Package
GopherConIndia 2015
20 Feb 2015

Keiji Yoshida
yoshida.keiji.84@gmail.com
http://yoss.si/
@_yosssi

* Self Introduction

* About Me

- Keiji Yoshida
- Software engineer at [[http://www.rco.recruit.co.jp/][Recruit Communications Co., Ltd.]] in Tokyo
- Using Ruby and Java at work
- Using Go only for my private work

.image 0220-good-package/keiji_yoshida.jpg

* Experience of Go

- Started using Go in the beginning of 2014
- [[https://github.com/martini-contrib][Became a contributor]] to [[http://martini.codegangsta.io/][Martini]] which is a WAF for Go in April 2014
- [[http://slides.yoss.si/gocon/martini.html#/][Gave a presentation about Martini]] at [[http://connpass.com/event/6370/][Go Conference 2014 spring]] in Tokyo in May 2014
- Created some packages for building a web application in Go
.link https://github.com/yosssi/ace Ace - HTML template engine for Go
.link https://github.com/yosssi/gcss GCSS - Pure Go CSS Preprocessor

* Goal

* To Share My Knowledge of Creating a Go package successfully

I have learned some good tips to create a Go package by having created many Go packages and having made a lot of mistakes.

This presentation is for Beginners of Go who want to create their own Go package.

* Follow the Standard Go Coding Style

* Standard Go Coding Style

You should follow the standard Go coding style written in the articles below:

- [[http://golang.org/doc/effective_go.html][Effective Go - The Go Programming Language]]
- [[https://code.google.com/p/go-wiki/wiki/CodeReviewComments][CodeReviewComments - go-wiki]]

There are a lot of rules you have to follow such as:

- Every exported (capitalized) name in a program should have a doc comment
- The convention in Go is to use _MixedCaps_ or _mixedCaps_ rather than underscores to write multiword names
- Error strings should not be capitalized (unless beginning with proper nouns or acronyms) or end with punctuation, since they are usually printed following other context

It is difficult for us to memorize all coding rules and follow them during coding.

* Use Golint

[[https://github.com/golang/lint][Golint]] is a linter for Go source code.

This tool checks Go source code if the source code is following the standard Go coding style or not.

.image 0220-good-package/golint.png

* Use goimports instead of gofmt

[[http://godoc.org/code.google.com/p/go.tools/cmd/goimports][goimports]] acts the same as gofmt but in addition to code formatting, it also updates Go import lines, adds missing ones and removes unreferenced ones.

goimports also organize import lines in groups with blank lines between them. The standard library packages are in the first group.

  package main
  
  import (
      "fmt"
      "hash/adler32"
      "os"
  
      "appengine/user"
      "appengine/foo"
  
      "code.google.com/p/x/y"
      "github.com/foo/bar"
  )

* To make a Go package extensible

* Export identifiers only which are needed to be so

We should not export all identifiers because exported identifiers are hard to be modified.
