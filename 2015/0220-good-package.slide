Tips for Creating a Good Package
GopherConIndia 2015
20 Feb 2015

Keiji Yoshida
Software engineer, Recruit Communications Co., Ltd.
yoshida_keiji@r.recruit.co.jp
http://yoss.si/
@_yosssi

* Self Introduction

* About me

- Keiji Yoshida
- Software engineer at [[http://www.rco.recruit.co.jp/][Recruit Communications Co., Ltd.]] in Tokyo
- Using Go only for my private work

.image 0220-good-package/keiji_yoshida.jpg

* Experience with Go

- Started using Go at the beginning of 2014
- [[https://github.com/martini-contrib][Became a contributor]] to [[http://martini.codegangsta.io/][Martini]], which is a WAF for Go
- [[http://slides.yoss.si/gocon/martini.html#/][Gave a presentation about Martini]] at a [[http://connpass.com/event/6370/][Go Conference]] in Tokyo in May 2014
- Created some packages for building a web application in Go
.link https://github.com/yosssi/ace Ace - HTML template engine for Go
.link https://github.com/yosssi/gcss GCSS - Pure Go CSS Preprocessor

* Goal

* Share my knowledge of creating a successful Go package

I have learned some good tips for creating a Go package through trial and error.

This presentation is for beginners of Go who want to create their own Go package.

* Following the standard Go coding style

* Standard Go coding style

We should follow the standard Go coding style as written in the articles below:

- [[http://golang.org/doc/effective_go.html][Effective Go - The Go Programming Language]]
- [[https://code.google.com/p/go-wiki/wiki/CodeReviewComments][CodeReviewComments - go-wiki]]

There are a lot of rules we have to follow such as:

- Every exported (capitalized) name in a program should have a doc comment
- The convention in Go is to use _MixedCaps_ or _mixedCaps_ rather than underscores to write multiword names
- Error strings should not be capitalized (unless beginning with proper nouns or acronyms) or end with punctuation, since they are usually printed following other context

*It*is*difficult*to*memorize*all*coding*rules*and*follow*them*during*coding.*

* Using Golint

[[https://github.com/golang/lint][Golint]] is a linter for Go source code.

This tool checks Go source code to see if the source code is following the standard Go coding style or not.

.image 0220-good-package/golint.png

* Using goimports instead of gofmt

[[http://godoc.org/code.google.com/p/go.tools/cmd/goimports][goimports]] acts the same as gofmt but in addition to code formatting, it also updates Go import lines, adds missing ones and removes unreferenced ones.

goimports also organizes import lines in groups with blank lines between them. The standard library packages are in the first group.

  package main

  import (
      "fmt"
      "hash/adler32"
      "os"

      "appengine/user"
      "appengine/foo"

      "code.google.com/p/x/y"
      "github.com/foo/bar"
  )

* Making our Go packages extensible

* Exporting identifiers only when needed

We should not export all identifiers because exported identifiers are difficult to modify

.code 0220-good-package/export_identifiers_ng.go /START OMIT/,/END OMIT/

Only export identifiers when necessary.

.code 0220-good-package/export_identifiers_ok.go /START OMIT/,/END OMIT/

* Using Options struct as a parameter 1/4

Suppose we define a `Dog` struct and its construct function as following:

.code 0220-good-package/options_ng1.go /START OMIT/,/END OMIT/

* Using Options struct as a parameter 2/4

If we need to add an `age` field to the `Dog` struct, we have to create a new function:

.code 0220-good-package/options_ng2.go /START OMIT/,/END OMIT/

We cannot change the `NewDog` function's signature because it has been exported.

* Using Options struct as a parameter 3/4

After repeating this kind of modification, disaster strikes:

.code 0220-good-package/options_ng3.go /START OMIT/,/END OMIT/

* Using Options struct as a parameter 4/4

We can avoid adding a new function when a new field is added by using Options struct.

.code 0220-good-package/options_ok.go /START OMIT/,/END OMIT/

* Dividing a larger struct into smaller ones 1/7

When I started creating an HTML template engine, I created a single struct representing all of the template file's elements.

.image 0220-good-package/element_struct.png

* Dividing a larger struct into smaller ones 2/7

The `element` struct became very large because it contained all element types' processing and lost its maintainability.

.code 0220-good-package/element_struct.go /START OMIT/,/END OMIT/

* Dividing a larger struct into smaller ones 3/7

I divided the `element` struct into smaller ones and created an `element` interface.

.image 0220-good-package/element_interface.png

* Dividing a larger struct into smaller ones 4/7

I could divide the single large processing into smaller processing that made my package more maintainable.

.code 0220-good-package/element_interface.go /START OMIT/,/END OMIT/

* Dividing a larger struct into smaller ones 5/7

In addition, each element has its child elements just like each HTML tag does.

.code 0220-good-package/element_duplicate.go /START OMIT/,/END OMIT/

* Dividing a larger struct into smaller ones 6/7

I created an `elementBase` struct which had fields and methods common among elements.

I embedded the `elementBase` struct into the structs which implemented the `element` interface.

.image 0220-good-package/element_embed.png

* Dividing a larger struct into smaller ones 7/7

By having embedded the `elementBase` struct into the structs which implemented the `element` interface, I could get rid of the duplicated fields and methods.

.code 0220-good-package/element_embed.go /START OMIT/,/END OMIT/

* Giving users the freedom of using our package

* Giving users the option to call APIs sequentially or concurrently 1/3

When I released my CSS preprocessing package like [[http://sass-lang.com/][Sass]] which compiles a simplified CSS format file into a pure CSS format file, I made the `Compile` function always run concurrently because it involved many I/O blocking processes.

.code 0220-good-package/concurrent.go /START OMIT/,/END OMIT/

But I noticed we could not use this function sequentially if we wanted to do so.

* Giving users the option to call APIs sequentially or concurrently 2/3

I changed the function to always run sequentially.

.code 0220-good-package/sequential.go /START OMIT/,/END OMIT/

* Giving users the option to call APIs sequentially or concurrently 3/3

Users can choose to call the function sequentially or concurrently.

.code 0220-good-package/sequential_concurrent.go /START OMIT/,/END OMIT/

* Using an interface as a function parameter 1/3

The precedent `Compile` function gets a file path as a parameter and load the file specified by the parameter.

.code 0220-good-package/use_interface_parameter_path.go /START OMIT/,/END OMIT/

We cannot load binary data onto memory instead of a file on disk using this function because all it can get is a file path.

* Using an interface as a function parameter 2/3

I changed the function parameter from the file path string to `io.Reader` so that users can pass to the function any data they want to load and compile.

.code 0220-good-package/use_interface_parameter_reader.go /START OMIT/,/END OMIT/

The `Compile` function writes the result data only to a file on disk. Users cannot write the result data to other locations.

* Using an interface as a function parameter 3/3

I added an `io.Writer` parameter to the function so that users can write the result data to anywhere they like.

.code 0220-good-package/use_interface_parameter_reader_writer.go /START OMIT/,/END OMIT/

We can make our functions much more flexible and useful to users by using an interface as a function parameter.

* Testing

* Don't write test codes last, but write them while creating a package

It is very difficult to concentrate on writing only test codes.

Writing test codes along with creating a package is a good strategy to maintain motivation for writing test codes.

* We should aim to accomplish 100% of the test coverage

- To detect the regression when we modify our package
- To keep up with the updated versions of Go language and the packages which our package depends on
- To detect the race condition in our package

* Replacing a global variable during testing 1/2

Replacing a global variable's value with another value is helpful in accomplishing 100% of the test coverage.

For example, we cannot test the block which has `os.Exit` because it terminates the testing process.

.code 0220-good-package/replace_global_var1.go /START OMIT/,/END OMIT/

* Replacement of a global variable during testing 2/2

By defining a global variable which has value of os.Exit and replacing it with a function which does not terminate the process, we can test the block in which `os.Exit` was originally called.

.code 0220-good-package/replace_global_var2.go /START OMIT/,/END OMIT/

.code 0220-good-package/replace_global_var2_test.go /START OMIT/,/END OMIT/

* Table driven tests

[[https://code.google.com/p/go-wiki/wiki/TableDrivenTests][Table driven tests]] are useful for writing many test cases in simple order.

.code 0220-good-package/table_driven_tests_test.go /START OMIT/,/END OMIT/

* Testing our Go code automatically on CI services

Linux

- [[http://wercker.com/][wercker]]
- [[https://drone.io/][drone.io]]
- [[https://travis-ci.org/][Travis CI]]
- [[https://circleci.com/][CircleCI]]

Windows

- [[https://ci.appveyor.com][AppVeyor]]
